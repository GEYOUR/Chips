                        .module pwm_led.c
                        .area text(rom, con, rel)
 0000                   .dbfile pwm_led.c
 0000                   .dbfile F:\.[School]\Chip\iccv7\TES11_小测\pwm_led.c
 0000                   .dbfunc e get_ad _get_ad fi
 0000           ;              i -> R16,R17
                        .even
 0000           _get_ad::
 0000                   .dbline -1
 0000                   .dbline 4
 0000           ; #include <iom16v.h>
 0000           ; #include <macros.h>
 0000           ; /*ADC采样函数，采样第1通道信号，采样分辨率1024*/
 0000           ; unsigned int get_ad(void) {
 0000                   .dbline 6
 0000           ;       unsigned int i;
 0000           ;       ADMUX = (1 << REFS0)|(1 << MUX0);/*AVCC、通道1*/
 0000 81E4              ldi R24,65
 0002 87B9              out 0x7,R24
 0004                   .dbline 7
 0004           ;       ADCSRA|=(1 << ADEN) |(1<< ADSC);        /*使能、开启*/
 0004 86B1              in R24,0x6
 0006 806C              ori R24,192
 0008 86B9              out 0x6,R24
 000A                   .dbline 8
 000A           ;       ADCSRA|=(1<<ADPS2)|(1 << ADPS1)|(1 << ADPS0);   /*128分频*/
 000A 86B1              in R24,0x6
 000C 8760              ori R24,7
 000E 86B9              out 0x6,R24
 0010           L2:
 0010                   .dbline 9
 0010           ;       while(!(ADCSRA & (1 << ADIF))); /*等待采样结束*/
 0010           L3:
 0010                   .dbline 9
 0010 349B              sbis 0x6,4
 0012 FECF              rjmp L2
 0014           X0:
 0014                   .dbline 10
 0014           ;       i = ADC;                        /*读取AD结果*/
 0014 04B1              in R16,0x4
 0016 15B1              in R17,0x5
 0018                   .dbline 11
 0018           ;       ADCSRA &= ~(1 << ADIF); /*清标志*/
 0018 3498              cbi 0x6,4
 001A                   .dbline 12
 001A           ;       ADCSRA &= ~(1 << ADEN); /*关闭转换*/
 001A 3798              cbi 0x6,7
 001C                   .dbline 13
 001C           ;       return i;          /*返回结果*/
 001C                   .dbline -2
 001C           L1:
 001C                   .dbline 0 ; func end
 001C 0895              ret
 001E                   .dbsym r i 16 i
 001E                   .dbend
 001E                   .dbfunc e io_init _io_init fV
                        .even
 001E           _io_init::
 001E                   .dbline -1
 001E                   .dbline 16
 001E           ; }
 001E           ; void io_init(void) 
 001E           ; {     DDRA = 0x00;    /*方向输入*/
 001E                   .dbline 16
 001E 2224              clr R2
 0020 2ABA              out 0x1a,R2
 0022                   .dbline 17
 0022           ;       PORTA = 0xFF;   /*打开上拉*/
 0022 8FEF              ldi R24,255
 0024 8BBB              out 0x1b,R24
 0026                   .dbline 18
 0026           ;       DDRB = 0xFF;    /*方向输出*/
 0026 87BB              out 0x17,R24
 0028                   .dbline 19
 0028           ;       PORTB = 0xFF;   /*输出高电平*/
 0028 88BB              out 0x18,R24
 002A                   .dbline -2
 002A           L5:
 002A                   .dbline 0 ; func end
 002A 0895              ret
 002C                   .dbend
 002C                   .dbfunc e pwm_init _pwm_init fV
                        .even
 002C           _pwm_init::
 002C                   .dbline -1
 002C                   .dbline 22
 002C           ; }
 002C           ; void pwm_init(void)
 002C           ; {   OCR0=0;   /*先预设值，防止启动瞬间值为空*/
 002C                   .dbline 22
 002C 2224              clr R2
 002E 2CBE              out 0x3c,R2
 0030                   .dbline 23
 0030           ;     TCCR0 |=(1<<WGM00);   //相位可调PWM模式
 0030 83B7              in R24,0x33
 0032 8064              ori R24,64
 0034 83BF              out 0x33,R24
 0036                   .dbline 24
 0036           ;     TCCR0 |=(1<<CS02);      //64分频
 0036 83B7              in R24,0x33
 0038 8460              ori R24,4
 003A 83BF              out 0x33,R24
 003C                   .dbline 25
 003C           ;     TCCR0 |=(1<<COM01);     //正向PWM
 003C 83B7              in R24,0x33
 003E 8062              ori R24,32
 0040 83BF              out 0x33,R24
 0042                   .dbline -2
 0042           L6:
 0042                   .dbline 0 ; func end
 0042 0895              ret
 0044                   .dbend
 0044                   .dbfunc e main _main fV
 0044           ;              j -> R10,R11
                        .even
 0044           _main::
 0044                   .dbline -1
 0044                   .dbline 28
 0044           ; }
 0044           ; void main(void) 
 0044           ; {     unsigned int j;
 0044                   .dbline 29
 0044           ;     io_init();          /*IO口初始化*/
 0044 ECDF              xcall _io_init
 0046                   .dbline 30
 0046           ;       pwm_init();
 0046 F2DF              xcall _pwm_init
 0048 02C0              xjmp L9
 004A           L8:
 004A                   .dbline 32
 004A           ;                       while (1) 
 004A           ;                       {       j = get_ad();           /*获取电压*/
 004A                   .dbline 32
 004A DADF              xcall _get_ad
 004C 5801              movw R10,R16
 004E                   .dbline 36
 004E           ;                                   //OCR1A=j/4;
 004E           ;                                       //OCR1B=j/4;  
 004E           ;       //AD是10位精度最大1023的值，而PWM是8位的，最大是255，所以必须除以4
 004E           ;               }
 004E           L9:
 004E                   .dbline 31
 004E FDCF              xjmp L8
 0050           X1:
 0050                   .dbline -2
 0050           L7:
 0050                   .dbline 0 ; func end
 0050 0895              ret
 0052                   .dbsym r j 10 i
 0052                   .dbend
 0052           ; }
