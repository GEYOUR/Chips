Interrupt Vectors
    00000 940C 002A JMP	__start|__text_start

Program Code (text area)
__start|__text_start:
    0002A E5CF      LDI	R28,0x5F
    0002B E0D4      LDI	R29,4
    0002C BFCD      OUT	0x3D,R28
    0002D BFDE      OUT	0x3E,R29
    0002E 51CE      SUBI	R28,0x1E
    0002F 40D0      SBCI	R29,0
    00030 EA0A      LDI	R16,0xAA
    00031 8308      ST	Y,R16
    00032 2400      CLR	R0
    00033 E6E0      LDI	R30,0x60
    00034 E0F0      LDI	R31,0
    00035 E010      LDI	R17,0
    00036 36E0      CPI	R30,0x60
    00037 07F1      CPC	R31,R17
    00038 F011      BEQ	0x003B
    00039 9201      ST	Z+,R0
    0003A CFFB      RJMP	0x0036
    0003B 8300      ST	Z,R16
    0003C E5E4      LDI	R30,0x54
    0003D E0F0      LDI	R31,0
    0003E E6A0      LDI	R26,0x60
    0003F E0B0      LDI	R27,0
    00040 E010      LDI	R17,0
    00041 E000      LDI	R16,0
    00042 BF0B      OUT	0x3B,R16
    00043 35E4      CPI	R30,0x54
    00044 07F1      CPC	R31,R17
    00045 F021      BEQ	0x004A
    00046 95C8      LPM
    00047 9631      ADIW	R30,1
    00048 920D      ST	X+,R0
    00049 CFF9      RJMP	0x0043
    0004A 940E 006F CALL	_main
_exit:
    0004C CFFF      RJMP	_exit
FILE: F:\.[School]\Chip\iccv7\TES11_小测\pwm_led.c
(0001) #include <iom16v.h>
(0002) #include <macros.h>
(0003) /*ADC采样函数，采样第1通道信号，采样分辨率1024*/
(0004) unsigned int get_ad(void) {
(0005) 	unsigned int i;
(0006) 	ADMUX = (1 << REFS0)|(1 << MUX0);/*AVCC、通道1*/
_get_ad:
  i                    --> R16
    0004D E481      LDI	R24,0x41
    0004E B987      OUT	0x07,R24
(0007) 	ADCSRA|=(1 << ADEN) |(1<< ADSC);	/*使能、开启*/
    0004F B186      IN	R24,0x06
    00050 6C80      ORI	R24,0xC0
    00051 B986      OUT	0x06,R24
(0008) 	ADCSRA|=(1<<ADPS2)|(1 << ADPS1)|(1 << ADPS0);	/*128分频*/
    00052 B186      IN	R24,0x06
    00053 6087      ORI	R24,7
    00054 B986      OUT	0x06,R24
(0009) 	while(!(ADCSRA & (1 << ADIF)));	/*等待采样结束*/
    00055 9B34      SBIS	0x06,4
    00056 CFFE      RJMP	0x0055
(0010) 	i = ADC;			/*读取AD结果*/
    00057 B104      IN	R16,0x04
    00058 B115      IN	R17,0x05
(0011) 	ADCSRA &= ~(1 << ADIF);	/*清标志*/
    00059 9834      CBI	0x06,4
(0012) 	ADCSRA &= ~(1 << ADEN);	/*关闭转换*/
    0005A 9837      CBI	0x06,7
(0013) 	return i;	   /*返回结果*/
    0005B 9508      RET
(0014) }
(0015) void io_init(void) 
(0016) {	DDRA = 0x00;	/*方向输入*/
_io_init:
    0005C 2422      CLR	R2
    0005D BA2A      OUT	0x1A,R2
(0017) 	PORTA = 0xFF;	/*打开上拉*/
    0005E EF8F      LDI	R24,0xFF
    0005F BB8B      OUT	0x1B,R24
(0018) 	DDRB = 0xFF;	/*方向输出*/
    00060 BB87      OUT	0x17,R24
(0019) 	PORTB = 0xFF;	/*输出高电平*/
    00061 BB88      OUT	0x18,R24
    00062 9508      RET
(0020) }
(0021) void pwm_init(void)
(0022) {   OCR0=0;	/*先预设值，防止启动瞬间值为空*/
_pwm_init:
    00063 2422      CLR	R2
    00064 BE2C      OUT	0x3C,R2
(0023)     TCCR0 |=(1<<WGM00);   //相位可调PWM模式
    00065 B783      IN	R24,0x33
    00066 6480      ORI	R24,0x40
    00067 BF83      OUT	0x33,R24
(0024)     TCCR0 |=(1<<CS02);      //64分频
    00068 B783      IN	R24,0x33
    00069 6084      ORI	R24,4
    0006A BF83      OUT	0x33,R24
(0025)     TCCR0 |=(1<<COM01);     //正向PWM
    0006B B783      IN	R24,0x33
    0006C 6280      ORI	R24,0x20
    0006D BF83      OUT	0x33,R24
    0006E 9508      RET
(0026) }
(0027) void main(void) 
(0028) {	unsigned int j;
(0029)     io_init();	  /*IO口初始化*/
_main:
  j                    --> R10
    0006F DFEC      RCALL	_io_init
(0030) 	pwm_init();
    00070 DFF2      RCALL	_pwm_init
    00071 C002      RJMP	0x0074
(0031) 			while (1) 
(0032) 			{	j = get_ad();		/*获取电压*/
FILE: <library>
    00072 DFDA      RCALL	_get_ad
    00073 0158      MOVW	R10,R16
    00074 CFFD      RJMP	0x0072
    00075 9508      RET
