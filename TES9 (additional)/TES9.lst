Interrupt Vectors
    00000 940C 0030 JMP	__text_start|__start
    00002 940C 007C JMP	_Int0
    00004 940C 009B JMP	_Int1

Program Code (text area)
__text_start|__start:
    00030 E5CF      LDI	R28,0x5F
    00031 E0D4      LDI	R29,4
    00032 BFCD      OUT	0x3D,R28
    00033 BFDE      OUT	0x3E,R29
    00034 51CE      SUBI	R28,0x1E
    00035 40D0      SBCI	R29,0
    00036 EA0A      LDI	R16,0xAA
    00037 8308      ST	Y,R16
    00038 2400      CLR	R0
    00039 E6EB      LDI	R30,0x6B
    0003A E0F0      LDI	R31,0
    0003B E010      LDI	R17,0
    0003C 36EB      CPI	R30,0x6B
    0003D 07F1      CPC	R31,R17
    0003E F011      BEQ	0x0041
    0003F 9201      ST	Z+,R0
    00040 CFFB      RJMP	0x003C
    00041 8300      ST	Z,R16
    00042 E5E4      LDI	R30,0x54
    00043 E0F0      LDI	R31,0
    00044 E6A0      LDI	R26,0x60
    00045 E0B0      LDI	R27,0
    00046 E010      LDI	R17,0
    00047 E000      LDI	R16,0
    00048 BF0B      OUT	0x3B,R16
    00049 35EF      CPI	R30,0x5F
    0004A 07F1      CPC	R31,R17
    0004B F021      BEQ	0x0050
    0004C 95C8      LPM
    0004D 9631      ADIW	R30,1
    0004E 920D      ST	X+,R0
    0004F CFF9      RJMP	0x0049
    00050 940E 00BA CALL	_main
_exit:
    00052 CFFF      RJMP	_exit
FILE: F:\.[School]\Chip\iccv7\TES9(A~1\LED_BREAK.c
(0001) #include<iom16v.h>
(0002) #include<macros.h>
(0003) unsigned char num[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
(0004) 
(0005) char state=0;
(0006) void ioit(void)
(0007) {DDRA=0xFF;
_ioit:
    00053 EF8F      LDI	R24,0xFF
    00054 BB8A      OUT	0x1A,R24
(0008)  PORTA=0x00;
    00055 2422      CLR	R2
    00056 BA2B      OUT	0x1B,R2
(0009)  DDRB=0xFF;
    00057 BB87      OUT	0x17,R24
(0010)  PORTB=0x00;
    00058 BA28      OUT	0x18,R2
(0011)  DDRD=0x00;
    00059 BA21      OUT	0x11,R2
(0012)  PORTD=0xFF;
    0005A BB82      OUT	0x12,R24
    0005B 9508      RET
(0013) }
(0014) void int_init(void)
(0015) {  CLI();
_int_init:
    0005C 94F8      BCLR	7
(0016)    GICR|=0xC0;
    0005D B78B      IN	R24,0x3B
    0005E 6C80      ORI	R24,0xC0
    0005F BF8B      OUT	0x3B,R24
(0017)    MCUCR=0x0F;
    00060 E08F      LDI	R24,0xF
    00061 BF85      OUT	0x35,R24
(0018)    GIFR=0xC0;
    00062 EC80      LDI	R24,0xC0
    00063 BF8A      OUT	0x3A,R24
(0019)    SEI();
    00064 9478      BSET	7
    00065 9508      RET
_delay:
  j                    --> R20
  i                    --> R16
    00066 934A      ST	-Y,R20
    00067 935A      ST	-Y,R21
(0020) }
(0021) void delay(unsigned int i)
(0022) { unsigned int j;
    00068 C00A      RJMP	0x0073
(0023)   while(--i)
(0024)     { for(j=0;j<=100;j++)
    00069 2744      CLR	R20
    0006A 2755      CLR	R21
    0006B C002      RJMP	0x006E
    0006C 5F4F      SUBI	R20,0xFF
    0006D 4F5F      SBCI	R21,0xFF
    0006E E684      LDI	R24,0x64
    0006F E090      LDI	R25,0
    00070 1784      CP	R24,R20
    00071 0795      CPC	R25,R21
    00072 F7C8      BCC	0x006C
    00073 01C8      MOVW	R24,R16
    00074 9701      SBIW	R24,1
    00075 018C      MOVW	R16,R24
    00076 3000      CPI	R16,0
    00077 0701      CPC	R16,R17
    00078 F781      BNE	0x0069
    00079 9159      LD	R21,Y+
    0007A 9149      LD	R20,Y+
    0007B 9508      RET
_Int0:
  i                    --> R16
    0007C 922A      ST	-Y,R2
    0007D 923A      ST	-Y,R3
    0007E 930A      ST	-Y,R16
    0007F 931A      ST	-Y,R17
    00080 938A      ST	-Y,R24
    00081 B62F      IN	R2,0x3F
    00082 922A      ST	-Y,R2
(0025) 	    ;
(0026) 	}
(0027) }
(0028) #pragma interrupt_handler Int0:2
(0029) void Int0(void)
(0030) { unsigned int i;
(0031)   i=1000;
    00083 EE08      LDI	R16,0xE8
    00084 E013      LDI	R17,3
    00085 C003      RJMP	0x0089
(0032)   while(i--)
(0033)   {
(0034)     if((PIND&(1<<PD2))==0)
    00086 9982      SBIC	0x10,2
    00087 C001      RJMP	0x0089
(0035) 	{ return;
    00088 C00A      RJMP	0x0093
    00089 0118      MOVW	R2,R16
    0008A 5001      SUBI	R16,1
    0008B 4010      SBCI	R17,0
    0008C 2022      TST	R2
    0008D F7C1      BNE	0x0086
    0008E 2033      TST	R3
    0008F F7B1      BNE	0x0086
(0036) 	}
(0037)   }
(0038)   state=1;
    00090 E081      LDI	R24,1
    00091 9380 006A STS	state,R24
    00093 9029      LD	R2,Y+
    00094 BE2F      OUT	0x3F,R2
    00095 9189      LD	R24,Y+
    00096 9119      LD	R17,Y+
    00097 9109      LD	R16,Y+
    00098 9039      LD	R3,Y+
    00099 9029      LD	R2,Y+
    0009A 9518      RETI
_Int1:
  i                    --> R16
    0009B 922A      ST	-Y,R2
    0009C 923A      ST	-Y,R3
    0009D 930A      ST	-Y,R16
    0009E 931A      ST	-Y,R17
    0009F 938A      ST	-Y,R24
    000A0 B62F      IN	R2,0x3F
    000A1 922A      ST	-Y,R2
(0039) }
(0040) #pragma interrupt_handler Int1:3
(0041) void Int1(void)
(0042) { unsigned int i;
(0043)   i=1000;
    000A2 EE08      LDI	R16,0xE8
    000A3 E013      LDI	R17,3
    000A4 C003      RJMP	0x00A8
(0044)   while(i--)
(0045)   {if((PIND&(1<<PD3))==0)
    000A5 9983      SBIC	0x10,3
    000A6 C001      RJMP	0x00A8
(0046)   {return;
    000A7 C00A      RJMP	0x00B2
    000A8 0118      MOVW	R2,R16
    000A9 5001      SUBI	R16,1
    000AA 4010      SBCI	R17,0
    000AB 2022      TST	R2
    000AC F7C1      BNE	0x00A5
    000AD 2033      TST	R3
    000AE F7B1      BNE	0x00A5
(0047)   }
(0048)   }
(0049)   state=2;
    000AF E082      LDI	R24,2
    000B0 9380 006A STS	state,R24
    000B2 9029      LD	R2,Y+
    000B3 BE2F      OUT	0x3F,R2
    000B4 9189      LD	R24,Y+
    000B5 9119      LD	R17,Y+
    000B6 9109      LD	R16,Y+
    000B7 9039      LD	R3,Y+
    000B8 9029      LD	R2,Y+
    000B9 9518      RETI
(0050) }
(0051) void main(void)
(0052) {signed char a,i,j=0;
_main:
  i                    --> Y,+1
  a                    --> R12
  b                    --> R10
  k                    --> R22
  j                    --> R20
    000BA 2744      CLR	R20
(0053)  signed char k=9;
    000BB E069      LDI	R22,0x9
(0054)  signed char b=3;
    000BC E083      LDI	R24,3
    000BD 2EA8      MOV	R10,R24
(0055)  ioit();
    000BE DF94      RCALL	_ioit
(0056)  int_init();
    000BF DF9C      RCALL	_int_init
    000C0 C04E      RJMP	0x010F
(0057)  while(1)
(0058)  {
(0059)   
(0060)    switch(state)
    000C1 90E0 006A LDS	R14,state
    000C3 24FF      CLR	R15
    000C4 01C7      MOVW	R24,R14
    000C5 3081      CPI	R24,1
    000C6 E0E0      LDI	R30,0
    000C7 079E      CPC	R25,R30
    000C8 F029      BEQ	0x00CE
    000C9 3082      CPI	R24,2
    000CA E0E0      LDI	R30,0
    000CB 079E      CPC	R25,R30
    000CC F109      BEQ	0x00EE
    000CD C041      RJMP	0x010F
(0061)    {case 1: 
(0062)            PORTB=~(1<<a);
    000CE E001      LDI	R16,1
    000CF 2D1C      MOV	R17,R12
    000D0 940E 0111 CALL	lsl8
    000D2 2E20      MOV	R2,R16
    000D3 9420      COM	R2
    000D4 BA28      OUT	0x18,R2
(0063)    		   PORTA=num[j];
    000D5 E680      LDI	R24,0x60
    000D6 E090      LDI	R25,0
    000D7 2FE4      MOV	R30,R20
    000D8 27FF      CLR	R31
    000D9 FDE7      SBRC	R30,7
    000DA 95F0      COM	R31
    000DB 0FE8      ADD	R30,R24
    000DC 1FF9      ADC	R31,R25
    000DD 8020      LD	R2,Z
    000DE BA2B      OUT	0x1B,R2
(0064)            delay(1000);
    000DF EE08      LDI	R16,0xE8
    000E0 E013      LDI	R17,3
    000E1 DF84      RCALL	_delay
(0065) 		   	 if(j<9) j++;
    000E2 3049      CPI	R20,0x9
    000E3 F414      BGE	0x00E6
    000E4 9543      INC	R20
    000E5 C029      RJMP	0x010F
(0066) 		     else 
(0067) 			    {j=0;
    000E6 2744      CLR	R20
(0068) 		        if(a<3) a++;
    000E7 2D8C      MOV	R24,R12
    000E8 3083      CPI	R24,3
    000E9 F414      BGE	0x00EC
    000EA 94C3      INC	R12
    000EB C023      RJMP	0x010F
(0069) 			    else a=0;}
    000EC 24CC      CLR	R12
(0070) 		     break;
    000ED C021      RJMP	0x010F
(0071) 		 
(0072)     case 2:
(0073) 	       PORTB=~(1<<b);
    000EE E001      LDI	R16,1
    000EF 2D1A      MOV	R17,R10
    000F0 940E 0111 CALL	lsl8
    000F2 2E20      MOV	R2,R16
    000F3 9420      COM	R2
    000F4 BA28      OUT	0x18,R2
(0074) 		   PORTA=num[k];
    000F5 E680      LDI	R24,0x60
    000F6 E090      LDI	R25,0
    000F7 2FE6      MOV	R30,R22
    000F8 27FF      CLR	R31
    000F9 FDE7      SBRC	R30,7
    000FA 95F0      COM	R31
    000FB 0FE8      ADD	R30,R24
    000FC 1FF9      ADC	R31,R25
    000FD 8020      LD	R2,Z
    000FE BA2B      OUT	0x1B,R2
(0075) 	       delay(1000);
    000FF EE08      LDI	R16,0xE8
    00100 E013      LDI	R17,3
    00101 DF64      RCALL	_delay
(0076) 		   if(k>0) k--;
    00102 2422      CLR	R2
    00103 1626      CP	R2,R22
    00104 F414      BGE	0x0107
    00105 956A      DEC	R22
    00106 C008      RJMP	0x010F
(0077) 		   else
(0078) 		      { k=9;
    00107 E069      LDI	R22,0x9
(0079) 		        if(b>0) b--;
    00108 2422      CLR	R2
    00109 142A      CP	R2,R10
    0010A F414      BGE	0x010D
    0010B 94AA      DEC	R10
    0010C C002      RJMP	0x010F
(0080) 			    else b=3;}
FILE: <library>
    0010D E083      LDI	R24,3
    0010E 2EA8      MOV	R10,R24
    0010F CFB1      RJMP	0x00C1
    00110 9508      RET
lsl8:
    00111 2311      TST	R17
    00112 F019      BEQ	0x0116
    00113 0F00      LSL	R16
    00114 951A      DEC	R17
    00115 CFFB      RJMP	lsl8
    00116 9508      RET
